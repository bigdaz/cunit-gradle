// Everything here is required to publish a library that can be used by
// multiple toolchains on multiple operating systems. It's a bit ugly...
model {
    toolChains {
        visualCpp(VisualCpp)
        mingw(Gcc) {
            path new File("C:/MinGW/bin")
            addPlatformConfiguration(new MinGWPlatformConfiguration())
        }
        cygwin(Gcc) {
            path new File("C:/cygwin/bin")
            addPlatformConfiguration(new CygwinPlatformConfiguration())
        }
        gcc(Gcc)
        clang(Clang)
    }
    platforms {
        win {
            operatingSystem "windows"
            architecture "x86"
        }
        mingw {
            operatingSystem "windows"
            architecture "sparc"
        }
        cygwin {
            operatingSystem "windows"
            architecture "sparc"
        }
        osx {
            operatingSystem "osx"
            architecture "x86"
        }
        linux {
            operatingSystem "linux"
            architecture "x86"
        }
    }
}

abstract class AbstractPlatformConfiguration implements TargetPlatformConfiguration {
    List<String> cppCompilerArgs = []
    List<String> CCompilerArgs = []
    List<String> objectiveCCompilerArgs = []
    List<String> objectiveCppCompilerArgs = []
    List<String> assemblerArgs = []
    List<String> linkerArgs = []
    List<String> staticLibraryArchiverArgs = []
}

class MinGWPlatformConfiguration extends AbstractPlatformConfiguration {
    boolean supportsPlatform(Platform platform) {
        return platform.name == "mingw"
    }
}

class CygwinPlatformConfiguration extends AbstractPlatformConfiguration {
    boolean supportsPlatform(Platform platform) {
        return platform.name == "cygwin"
    }
}
